-- Supabase Vector Store Schema for noteCHAT
-- Run this SQL in your Supabase SQL Editor to setup the database

-- Enable pgvector extension for vector similarity search
CREATE EXTENSION IF NOT EXISTS vector;

-- Create document_chunks table to store PDF/DOCX chunks and embeddings
CREATE TABLE IF NOT EXISTS document_chunks (
    id BIGSERIAL PRIMARY KEY,
    chunk_id TEXT UNIQUE NOT NULL,
    content TEXT NOT NULL,
    source TEXT NOT NULL,
    page_number INTEGER,
    embedding vector(384),  -- all-MiniLM-L6-v2 produces 384-dimensional vectors
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create index for faster vector similarity search using IVFFlat algorithm
CREATE INDEX IF NOT EXISTS document_chunks_embedding_idx 
ON document_chunks 
USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Create index for faster source lookups
CREATE INDEX IF NOT EXISTS document_chunks_source_idx 
ON document_chunks(source);

-- Create index for chunk_id lookups
CREATE INDEX IF NOT EXISTS document_chunks_chunk_id_idx 
ON document_chunks(chunk_id);

-- Function to search for similar documents using cosine similarity
CREATE OR REPLACE FUNCTION match_documents(
    query_embedding vector(384),
    match_count int DEFAULT 5,
    filter_source text DEFAULT NULL
)
RETURNS TABLE (
    id bigint,
    chunk_id text,
    content text,
    source text,
    page_number int,
    similarity float
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT
        document_chunks.id,
        document_chunks.chunk_id,
        document_chunks.content,
        document_chunks.source,
        document_chunks.page_number,
        1 - (document_chunks.embedding <=> query_embedding) as similarity
    FROM document_chunks
    WHERE 
        CASE 
            WHEN filter_source IS NOT NULL THEN document_chunks.source = filter_source
            ELSE TRUE
        END
    ORDER BY document_chunks.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;

-- Function to get document statistics
CREATE OR REPLACE FUNCTION get_document_stats()
RETURNS TABLE (
    total_chunks bigint,
    unique_sources bigint,
    avg_content_length float
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT
        COUNT(*)::bigint as total_chunks,
        COUNT(DISTINCT source)::bigint as unique_sources,
        AVG(LENGTH(content))::float as avg_content_length
    FROM document_chunks;
END;
$$;

-- Create a view for easy document browsing
CREATE OR REPLACE VIEW document_sources AS
SELECT 
    source,
    COUNT(*) as chunk_count,
    MIN(page_number) as min_page,
    MAX(page_number) as max_page,
    MIN(created_at) as uploaded_at
FROM document_chunks
GROUP BY source
ORDER BY uploaded_at DESC;

-- Grant necessary permissions (adjust if using RLS)
-- ALTER TABLE document_chunks ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE document_chunks IS 'Stores document chunks and their vector embeddings for semantic search';
COMMENT ON COLUMN document_chunks.embedding IS 'Vector embedding (384 dimensions) generated by all-MiniLM-L6-v2';
COMMENT ON FUNCTION match_documents IS 'Finds similar documents using cosine similarity search';
